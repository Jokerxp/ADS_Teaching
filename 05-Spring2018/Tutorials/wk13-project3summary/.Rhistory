# run Results.R first
submitTime <- c(2, 28, 4, 1, 11, 7, 0, 23, 9, 26)
submitTime_label <- c("6:52pm", "7:18PM", "6:54", "6:51PM", "7:01PM", "6:57PM", "In Time", "7:13PM", "6:59PM", "7:16PM")
bar_time <- barplot(submitTime, main="Submission Time: Minutues from 6:50 PM",
xlab="Team", ylab="Minutes", ylim=c(0, 50))
text(bar_time, submitTime+5, submitTime_label, cex=0.6)
axis(1, bar_time, labels=as.character(1:10))
# run Results.R first
RunningTime <- c(156.37, 194.62, 162.66, 1, 30.4, 225.6, 356.72, 134.7, 155.86, 8.6)
log_RunningTime <- log(RunningTime)
bar_time <- barplot(log_RunningTime, main="Advanced Model Running Time",
xlab="Team", ylab="log(t)", ylim=c(0, 10))
text(bar_time, log_RunningTime+0.5, as.character(RunningTime), cex=0.8)
axis(1, bar_time, labels=as.character(1:10))
# run Results.R first
RunningTime <- c(156.37, 194.62, 162.66, 1, 30.4, 225.6, 356.72, 134.7, 155.86, 8.6)
log_RunningTime <- log(RunningTime)
bar_time <- barplot(log_RunningTime, main="Advanced Model Running Time",
xlab="Team", ylab="log(t)", ylim=c(0, 8))
text(bar_time, log_RunningTime+0.5, as.character(RunningTime), cex=0.8)
axis(1, bar_time, labels=as.character(1:10))
# run Results.R first
RunningTime <- c(156.35, 194.62, 162.63, 1, 30.4, 225.6, 356.72, 134.7, 155.86, 8.6)
log_RunningTime <- log(RunningTime)
bar_time <- barplot(log_RunningTime, main="Advanced Model Running Time",
xlab="Team", ylab="log(t)", ylim=c(0, 8))
text(bar_time, log_RunningTime+0.5, as.character(RunningTime), cex=0.8)
axis(1, bar_time, labels=as.character(1:10))
# data saved in Results.R
err_claimed <- c(
0.28,
0.2265,
0.323,
0.32,
0.437,
0.27,
0.29,
0.272,
0.3,
0.327)
err_adv_claimed <- rep(err_claimed, each=20)
CV_error_baseline <- c(
0.266,
0.248,
0.337,
0.27,
0.267,
0.283,
0.281,
0.263,
0.315,
0.29)
err_retrained <- rep(CV_error_baseline, each=20)
# load("label_eval.RData")
# load("pred_untuned.RData")
# ind_fun <- which(is.na(label_eval))
err_untuned <- c(
0.307,
0.308,
0.303,
0.283,
0.250,
0.281,
0.270,
0.271,
0.284,
0.325
)
err_adv_untuned <- rep(err_untuned  , each=20)
type_names <- c("claimed", "untuned", "re-trained")
# team_names <- paste0("Team ", 1:12)
team_names <- 1:10
# load("output_proj3.RData")
err_adv_all <- data.frame(Team=rep(rep(team_names, each=20), times=3),
Type=rep(type_names, each=200),
Error= c(err_adv_claimed, err_adv_untuned, err_retrained)) #as.vector(t(output$err_adv_retrained))))
err_adv_all$Type <- factor(err_adv_all$Type, levels= type_names)
err_adv_all$Team <- factor(err_adv_all$Team, levels= team_names)
err_adv_all$Error <- err_adv_all$Error*100
type_names <- c("claimed", "untuned", "re-trained")
team_names <- paste0("Team ", 1:10)
library(ggplot2)
(ggplot(err_adv_all, aes(y = Error, x = Team, fill = Type, colour = Type))
+ geom_boxplot(width=0.5,outlier.colour = NULL)
#+ scale_alpha_continuous(guide=FALSE, range=c(0.01,0.99))
+theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA),
axis.text=element_text(size=12),
axis.title=element_text(size=12),
legend.text=element_text(size=12),
legend.title=element_text(size=12, face="bold"),
legend.position="bottom",
strip.text.y = element_text(size = 13, face="bold"),
panel.background = element_blank())
+ labs(title="Baseline Model CV Error (%)", x="Team", y="Error Rate")
+ scale_colour_brewer(palette = "Dark2", guide = FALSE)
+ scale_fill_brewer(palette = "Pastel2", labels=type_names, guide = guide_legend(title = "Type"))
+ geom_vline(xintercept = seq(1.5, 13.5, 1), linetype = "longdash", colour="lightgrey"))
# data saved in Results.R
err_claimed <- c(
0.28,
0.2265,
0.323,
0.32,
0.437,
0.27,
0.29,
0.272,
0.3,
0.327)
err_adv_claimed <- rep(err_claimed, each=20)
CV_error_baseline <- c(
0.266,
0.248,
0.337,
0.27,
0.267,
0.283,
0.281,
0.263,
0.315,
0.31)
err_retrained <- rep(CV_error_baseline, each=20)
# load("label_eval.RData")
# load("pred_untuned.RData")
# ind_fun <- which(is.na(label_eval))
err_untuned <- c(
0.307,
0.308,
0.303,
0.283,
0.250,
0.281,
0.270,
0.271,
0.284,
0.325
)
err_adv_untuned <- rep(err_untuned  , each=20)
type_names <- c("claimed", "untuned", "re-trained")
# team_names <- paste0("Team ", 1:12)
team_names <- 1:10
# load("output_proj3.RData")
err_adv_all <- data.frame(Team=rep(rep(team_names, each=20), times=3),
Type=rep(type_names, each=200),
Error= c(err_adv_claimed, err_adv_untuned, err_retrained)) #as.vector(t(output$err_adv_retrained))))
err_adv_all$Type <- factor(err_adv_all$Type, levels= type_names)
err_adv_all$Team <- factor(err_adv_all$Team, levels= team_names)
err_adv_all$Error <- err_adv_all$Error*100
type_names <- c("claimed", "untuned", "re-trained")
team_names <- paste0("Team ", 1:10)
library(ggplot2)
(ggplot(err_adv_all, aes(y = Error, x = Team, fill = Type, colour = Type))
+ geom_boxplot(width=0.5,outlier.colour = NULL)
#+ scale_alpha_continuous(guide=FALSE, range=c(0.01,0.99))
+theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA),
axis.text=element_text(size=12),
axis.title=element_text(size=12),
legend.text=element_text(size=12),
legend.title=element_text(size=12, face="bold"),
legend.position="bottom",
strip.text.y = element_text(size = 13, face="bold"),
panel.background = element_blank())
+ labs(title="Baseline Model CV Error (%)", x="Team", y="Error Rate")
+ scale_colour_brewer(palette = "Dark2", guide = FALSE)
+ scale_fill_brewer(palette = "Pastel2", labels=type_names, guide = guide_legend(title = "Type"))
+ geom_vline(xintercept = seq(1.5, 13.5, 1), linetype = "longdash", colour="lightgrey"))
# data saved in Results.R
err_claimed <- c(
0.28,
0.2265,
0.323,
0.32,
0.437,
0.27,
0.29,
0.272,
0.3,
0.327)
err_adv_claimed <- rep(err_claimed, each=20)
CV_error_baseline <- c(
0.266,
0.248,
0.337,
0.27,
0.267,
0.283,
0.281,
0.263,
0.305,
0.31)
err_retrained <- rep(CV_error_baseline, each=20)
# load("label_eval.RData")
# load("pred_untuned.RData")
# ind_fun <- which(is.na(label_eval))
err_untuned <- c(
0.307,
0.308,
0.303,
0.283,
0.250,
0.281,
0.270,
0.271,
0.284,
0.325
)
err_adv_untuned <- rep(err_untuned  , each=20)
type_names <- c("claimed", "untuned", "re-trained")
# team_names <- paste0("Team ", 1:12)
team_names <- 1:10
# load("output_proj3.RData")
err_adv_all <- data.frame(Team=rep(rep(team_names, each=20), times=3),
Type=rep(type_names, each=200),
Error= c(err_adv_claimed, err_adv_untuned, err_retrained)) #as.vector(t(output$err_adv_retrained))))
err_adv_all$Type <- factor(err_adv_all$Type, levels= type_names)
err_adv_all$Team <- factor(err_adv_all$Team, levels= team_names)
err_adv_all$Error <- err_adv_all$Error*100
type_names <- c("claimed", "untuned", "re-trained")
team_names <- paste0("Team ", 1:10)
library(ggplot2)
(ggplot(err_adv_all, aes(y = Error, x = Team, fill = Type, colour = Type))
+ geom_boxplot(width=0.5,outlier.colour = NULL)
#+ scale_alpha_continuous(guide=FALSE, range=c(0.01,0.99))
+theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA),
axis.text=element_text(size=12),
axis.title=element_text(size=12),
legend.text=element_text(size=12),
legend.title=element_text(size=12, face="bold"),
legend.position="bottom",
strip.text.y = element_text(size = 13, face="bold"),
panel.background = element_blank())
+ labs(title="Baseline Model CV Error (%)", x="Team", y="Error Rate")
+ scale_colour_brewer(palette = "Dark2", guide = FALSE)
+ scale_fill_brewer(palette = "Pastel2", labels=type_names, guide = guide_legend(title = "Type"))
+ geom_vline(xintercept = seq(1.5, 13.5, 1), linetype = "longdash", colour="lightgrey"))
# data saved in Results.R
err_claimed <- c(
0.28,
0.2265,
0.323,
0.32,
0.437,
0.27,
0.29,
0.272,
0.3,
0.327)
err_adv_claimed <- rep(err_claimed, each=20)
CV_error_baseline <- c(
0.266,
0.248,
0.337,
0.29,
0.267,
0.283,
0.281,
0.263,
0.305,
0.31)
err_retrained <- rep(CV_error_baseline, each=20)
# load("label_eval.RData")
# load("pred_untuned.RData")
# ind_fun <- which(is.na(label_eval))
err_untuned <- c(
0.307,
0.308,
0.303,
0.283,
0.250,
0.281,
0.270,
0.271,
0.284,
0.325
)
err_adv_untuned <- rep(err_untuned  , each=20)
type_names <- c("claimed", "untuned", "re-trained")
# team_names <- paste0("Team ", 1:12)
team_names <- 1:10
# load("output_proj3.RData")
err_adv_all <- data.frame(Team=rep(rep(team_names, each=20), times=3),
Type=rep(type_names, each=200),
Error= c(err_adv_claimed, err_adv_untuned, err_retrained)) #as.vector(t(output$err_adv_retrained))))
err_adv_all$Type <- factor(err_adv_all$Type, levels= type_names)
err_adv_all$Team <- factor(err_adv_all$Team, levels= team_names)
err_adv_all$Error <- err_adv_all$Error*100
type_names <- c("claimed", "untuned", "re-trained")
team_names <- paste0("Team ", 1:10)
library(ggplot2)
(ggplot(err_adv_all, aes(y = Error, x = Team, fill = Type, colour = Type))
+ geom_boxplot(width=0.5,outlier.colour = NULL)
#+ scale_alpha_continuous(guide=FALSE, range=c(0.01,0.99))
+theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA),
axis.text=element_text(size=12),
axis.title=element_text(size=12),
legend.text=element_text(size=12),
legend.title=element_text(size=12, face="bold"),
legend.position="bottom",
strip.text.y = element_text(size = 13, face="bold"),
panel.background = element_blank())
+ labs(title="Baseline Model CV Error (%)", x="Team", y="Error Rate")
+ scale_colour_brewer(palette = "Dark2", guide = FALSE)
+ scale_fill_brewer(palette = "Pastel2", labels=type_names, guide = guide_legend(title = "Type"))
+ geom_vline(xintercept = seq(1.5, 13.5, 1), linetype = "longdash", colour="lightgrey"))
# data saved in Results.R
err_claimed <- c(
0.0933,
0.065,
0.0794,
0.01,
0.099,
0.082,
0.13,
0.168,
0.0977,
0.232)
err_adv_claimed <- rep(err_claimed, each=20)
CV_error_baseline <- c(
0.089,
0.073,
0.081,
0.01,
0.115,
0.081,
0.147,
0.157,
0.111,
0.2285)
err_retrained <- rep(CV_error_baseline, each=20)
# load("label_eval.RData")
# load("pred_untuned.RData")
# ind_fun <- which(is.na(label_eval))
err_untuned <- c(
0.117,
0.105,
0.084,
0.009,
0.128,
0.106,
0.162,
0.186,
0.102,
0.255
)
err_adv_untuned <- rep(err_untuned  , each=20)
type_names <- c("claimed", "untuned", "re-trained")
# team_names <- paste0("Team ", 1:12)
team_names <- 1:10
# load("output_proj3.RData")
err_adv_all <- data.frame(Team=rep(rep(team_names, each=20), times=3),
Type=rep(type_names, each=200),
Error= c(err_adv_claimed, err_adv_untuned, err_retrained)) #as.vector(t(output$err_adv_retrained))))
err_adv_all$Type <- factor(err_adv_all$Type, levels= type_names)
err_adv_all$Team <- factor(err_adv_all$Team, levels= team_names)
err_adv_all$Error <- err_adv_all$Error*100
type_names <- c("claimed", "untuned", "re-trained")
team_names <- paste0("Team ", 1:10)
library(ggplot2)
(ggplot(err_adv_all, aes(y = Error, x = Team, fill = Type, colour = Type))
+ geom_boxplot(width=0.5,outlier.colour = NULL)
#+ scale_alpha_continuous(guide=FALSE, range=c(0.01,0.99))
+theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA),
axis.text=element_text(size=12),
axis.title=element_text(size=12),
legend.text=element_text(size=12),
legend.title=element_text(size=12, face="bold"),
legend.position="bottom",
strip.text.y = element_text(size = 13, face="bold"),
panel.background = element_blank())
+ labs(title="Advanced Model CV Error (%)", x="Team", y="Error Rate")
+ scale_colour_brewer(palette = "Dark2", guide = FALSE)
+ scale_fill_brewer(palette = "Pastel2", labels=type_names, guide = guide_legend(title = "Type"))
+ geom_vline(xintercept = seq(1.5, 13.5, 1), linetype = "longdash", colour="lightgrey"))
# run Results.R first
RunningTime <- c(156.35, 224.62, 162.63, 1, 30.4, 225.6, 356.72, 155.86, 114.7, 8.6)
log_RunningTime <- log(RunningTime)
bar_time <- barplot(log_RunningTime, main="Advanced Model Running Time",
xlab="Team", ylab="log(t)", ylim=c(0, 8))
text(bar_time, log_RunningTime+0.5, as.character(RunningTime), cex=0.8)
axis(1, bar_time, labels=as.character(1:10))
# run Results.R first
RunningTime <- c(156.35, 224.62, 162.63, 1, 30.4, 225.6, 356.72, 155.86, 114.7, 5.6)
log_RunningTime <- log(RunningTime)
bar_time <- barplot(log_RunningTime, main="Advanced Model Running Time",
xlab="Team", ylab="log(t)", ylim=c(0, 8))
text(bar_time, log_RunningTime+0.5, as.character(RunningTime), cex=0.8)
axis(1, bar_time, labels=as.character(1:10))
